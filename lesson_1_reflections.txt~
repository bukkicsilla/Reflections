reflections about how to use git and github

git diff                   working directory staging area
git diff --staged          staging area commit1
git diif id_old id_new     commit_old commit_new  

git branch another
git branch
git checkout another

On branch short-mode
nothing to commit, working directory clean
context switching

git log --graph --oneline master short-mode

git checkout -b new_branch_name = git branch new_branch_name, git checkout new_branch_name

delete: git branch -d bracnh_name

//these lines were deleted by merge , why???
How did viewing a diff between two versions of a file help you see the bug that was introduced?
It shows the differences in the old and the new files.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Debugging can be faster, to work with others can be easier.

 How is the staging area different from the working directory and the repository? What value do you think it offers?
 Staging area contains the files which will be added, deleted or updated in the repository. Unchanged files dont need to be 
commited to repository. Working directory contains only the current files. 
//end of deletion

git diff shows the differance between the working directory and staging area

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If I want to try something new, but I dont know yet whether it will be in the final version. Context switching

How do the diagrams help you visualize the branch structure?
It has a tree structure. I can see where are the branchings. I have to use the command git log --graph --oneline [some branch names]

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result can cause conflict. I had to resolve one. 
